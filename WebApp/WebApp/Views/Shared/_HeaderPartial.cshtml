@using System.Security.Claims
@using Domain.Hubs
@{
    // var userRole = User.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).ToList();
    var userName = User.Claims.FirstOrDefault(x => x.Type == "DisplayName")?.Value;
}

@* @{
    var provider = User?.FindFirstValue(ClaimTypes.AuthenticationMethod);
    if (string.IsNullOrEmpty(provider))
        provider = "Local Identity";

    var email = User?.FindFirstValue(ClaimTypes.Email);
} *@



<form class="search-form" method="get" asp-controller="" asp-action="" novalidate>
    <i class="fa-solid fa-magnifying-glass"></i>
    <input type="search" class="form-search-input" placeholder="Search anything... " />
</form>

<!--  NOTIFICATION DROPDOWN -->
<div id="notification-container">
    <button type="button" data-target="#notification-dropdown" class="btn-notification">
        <i class="dot dot-red fa-solid fa-circle"></i>
        <i class="fa-duotone fa-solid fa-bell" style="--fa-primary-opacity: 0.4; --fa-secondary-opacity: 1;"></i>
    </button>

    <div id="notification-dropdown" class="dropdown">
        <div class="dropdown-header">
            <h4>Notifications</h4>
            <div class="badge badge-red">0</div>
        </div>
        <div class="divider"></div>
        <div class="notifications">
            @foreach (var notification in ViewBag.Notifications ?? new List<Notification>())
            {
                <div class="notification" >

                    <img class="user-image" src="~/images/Admin/Contacts.svg" alt="User Image" />
                    <div class="account-info">@userName</div>       
                    <div class="provider"></div>
                    <div class="message">@notification.Message</div>
                    <div class="time">@notification.Created.ToShortTimeString()</div>
                    <button class="btn-close" onclick="NotificationDismissed(@notification.Id)"></button>
                </div>
            }
        </div>
    </div>
</div>
<!--  DARKMODE DROPDOWN -->
<div id="darkMode-container">
    <button type="button" data-target="#darkMode-dropdown" class="btn-darkMode">
        <i class="fa-duotone fa-solid fa-cog"></i>
    </button>
    <div id="darkMode-dropdown" class="dropdown">
        <nav class="dropdown-options">
            <div class="dropdown-option">
                <label for="darkModeToggle" class="switch-label">
                    <i class="fa-duotone fa-solid fa-cog"></i>
                    <span>Dark Mode</span>
                </label>
                <label class="switch">
                    <input type="checkbox" id="darkModeToggle" class="toggle" />
                    <span class="switch-slider"></span>
                </label>
            </div>
        </nav>
    </div>
</div>
<!--  ACCOUNT DROPDOWN -->
<div id="account-container">
    <button type="button" data-target="#account-dropdown" class="btn-account">
        <img src="~/images/Admin/Contacts.svg" alt="User Image" />
    </button>
    <div id="account-dropdown" class="dropdown">
        <div class="dropdown-header">
            <div class="account-name">
                <img src="~/images/Admin/Contacts.svg" alt="User Image" />
               
                    @* <span class="text-muted">Current Role:</span>
                    @if (userRole.Any())
                    {
                        <span>@string.Join(", ", userRole)</span>
                    }
                    *@
                   
                    <div>@userName</div>
                    
              
            </div>
            <div class="provider"></div>
        </div>
        <div class="dropdown-body">
            <nav class="dropdown-options">
                <div class="dropdown-option">
                    <label for="darkModeToggle" class="switch-label">
                        <i class="fa-duotone fa-solid fa-cog"></i>
                        <span>Dark Mode</span>
                    </label>
                    <label class="switch">
                        <input type="checkbox" id="darkModeToggle" data-type="toggle" data-func="darkmode" />
                        <span class="switch-slider"></span>
                    </label>
                </div>
            </nav>
        </div>
        
        <div class="dropdown-footer">
            <nav class="dropdown-options">
                <a asp-controller="Auth" asp-action="Logout" class="btn-external btn-signout">
                    <i class="fa-duotone fa-solid fa-right-from-bracket"></i>
                    <span>Logout</span>
                </a>
            </nav>
        </div>
    </div>
</div>

<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/notificationHub")
        .build();
        connection.on("ReceiveNotification", function (notification) {
            const notifications = document.querySelector(".notifications");

            const item = document.createElement("div");
            item.className = "notification";
            item.setAttribute("data-notification-id", notification.id);
            item.innerHTML = `
                <img class="user-image" src="~/images/Admin/Contacts.svg" alt="User Image" />
                <div class="account-info">${notification.userName}</div>
                <div class="provider"></div>
                <div class="message">${notification.message}</div>
                <div class="time">${new Date(notification.created).toLocaleTimeString()}</div>
                <button class="btn-close" onclick=""></button>
            `
            notifications.insertBefore(item, notifications.firstChild)

            updateRelativeTimes()
            updateNotificationCount()
        })

        connection.on("NotificationDismissed", function (notificationId) {
            const notification = document.querySelector(`.notification[data-notification-id="${notificationId}"]`)
            if (notification) {
                notification.remove()
            }
            updateNotificationCount()
        })
        connection.start().catch(function (err) {
            return console.error(err.toString());
        });
        function removeNotification(notificationId) {
            const notification = document.querySelector(`.notification[data-notification-id="${notificationId}"]`)
            if (notification) {
                notification.remove()
                updateNotificationCount()
            }
        }

        function updateNotificationCount() {
            const notifications = document.querySelector(".notifications")
            const count = notifications.querySelectorAll(".notification").length
            const notificationCount = document.querySelector(".btn-notification .badge")
            const dot = document.querySelector(".btn-notification .dot")

            let dot = document.querySelector(".btn-notification .dot")
            if (count > 0 && !dot) {
                notificationCount.textContent = count
                notificationCount.classList.add("badge-red")
                dot.classList.add("dot-red")
            } else {
                notificationCount.textContent = ""
                notificationCount.classList.remove("badge-red")
                dot.classList.remove("dot-red")
            }
            if(count === 0 && dot)
                dot.remove()
        }
</script>